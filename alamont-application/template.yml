Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  HashKeyElementName:
    Type: String
    Default: id
    Description: Hash Key Name
  HashKeyElementType:
    Type: String
    Default: S
    Description: Hash Key Type
  TableName:
    Type: String
    Description: DynamoDB Table Name
    AllowedPattern: '^([a-z0-9]{1}[a-z0-9-]{1,61}[a-z0-9]{1})$'
    Default: task

Resources :
    RestApi :
        Type : AWS::ApiGateway::RestApi
        Properties :
            Name : Alamont API
            Description: Alamont API deployed using CFT
            Parameters:
                endpointConfigurationTypes: REGIONAL        
            Body:
                openapi: 3.0.1
                info:
                  version: 1.0.0
                  title: Alamont API
                  description: 'Alamont API'

                paths: 
                  /divisions:
                    get:
                      responses:
                        '200':
                          description: all good
                          content:
                            application/json:
                              schema:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ArrayOfDivision'
                      x-amazon-apigateway-integration:
                        type: "mock"
                        responses:
                          default:
                            statusCode: "200"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        passthroughBehavior: "when_no_match"

                  /divisions/{divId}:
                    patch:
                      parameters:
                      - name: "divId"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      requestBody:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/MODEL845314'
                        required: true
                      responses:
                        '404':
                          description: "404 response"
                          content: {}
                        '204':
                          description: "204 response"
                          content: {}
                      x-amazon-apigateway-integration:
                        type: "mock"
                        responses:
                          default:
                            statusCode: "200"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        passthroughBehavior: "when_no_match"
                  /division/{divId}/tasks:
                    get:
                      parameters:
                      - name: "divId"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      responses:
                        '200':
                          description: "200 response"
                          headers:
                            Access-Control-Allow-Origin:
                              schema:
                                type: "string"
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/Task"
                      x-amazon-apigateway-integration:
                          type: "aws"
                          credentials: "arn:aws:iam::948478278077:role/api-dd"
                          uri: "arn:aws:apigateway:us-east-2:dynamodb:action/Query"
                          httpMethod: "POST"
                          responses:
                            default:
                              statusCode: "200"
                              responseParameters:
                                method.response.header.Access-Control-Allow-Origin: "'*'"
                              responseTemplates:
                                application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"\
                                  tasks\": [\r\n        #foreach($elem in $inputRoot.Items) {\r\n  \
                                  \          \"id\": \"$elem.id.S\",\r\n            \"divisionId\":\
                                  \ \"$elem.divisionId.S\",\r\n            \"month\": \"$elem.month.S\"\
                                  ,\r\n            \"taskType\": \"$elem.taskType.S\",\r\n         \
                                  \   \"year\": \"$elem.year.S\",\r\n            \"done\": \"$elem.done.S\"\
                                  \r\n        }#if($foreach.hasNext),#end\r\n #end\r\n    ]\r\n}"
                          requestTemplates:
                            application/json: "{\r\n    \"TableName\": \"Task\",\r\n    \"IndexName\"\
                              : \"divisionId-index\",\r\n    \"KeyConditionExpression\": \"divisionId\
                              \ = :val\",\r\n    \"ExpressionAttributeValues\": {\r\n        \":val\"\
                              : {\r\n            \"S\": \"$input.params('divId')\"\r\n        }\r\n\
                              \    }\r\n}"
                          passthroughBehavior: "when_no_templates"
                    options:
                      x-amazon-apigateway-integration:
                        type: "mock"
                        responses:
                          default:
                            statusCode: "200"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        passthroughBehavior: "when_no_match"

                  /division/{divId}/tasks/{taskId}:
                    put:
                      parameters:
                      - name: "divId"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      - name: "taskId"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      requestBody:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Task'
                        required: true
                      responses:
                        '200':
                          description: "200 response"
                          headers:
                            Access-Control-Allow-Origin:
                              schema:
                                type: "string"
                          content: {}
                      x-amazon-apigateway-integration:
                        credentials: "arn:aws:iam::948478278077:role/api-dd"
                        uri: "arn:aws:apigateway:us-east-2:dynamodb:action/PutItem"
                        httpMethod: "POST"
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Access-Control-Allow-Origin: "'*'"
                            responseTemplates:
                              application/json: "{\"statusCode\": 200}"
                        requestTemplates:
                          application/json: "{ \r\n    \"TableName\": \"Task\",\r\n    \"Item\": {\r\
                            \n     \"id\": {\r\n            \"S\": \"$input.params('taskId')\"\r\n\
                            \        },\r\n        \"divisionId\": {\r\n            \"S\": \"$input.params('divId')\"\
                            \r\n            },\r\n        \"done\": {\r\n            \"S\": \"$input.path('$.done')\"\
                            \r\n        },\r\n        \"month\": {\r\n            \"S\": \"$input.path('$.month')\"\
                            \r\n        },\r\n        \"taskType\": {\r\n            \"S\": \"$input.path('$.taskType')\"\
                            \r\n        },\r\n        \"year\": {\r\n            \"S\": \"$input.path('$.year')\"\
                            \r\n        }\r\n    }\r\n}\r\n"
                        passthroughBehavior: "when_no_templates"
                        type: "aws"
                    options:
                      responses:
                        '200':
                          description: "200 response"
                          headers:
                            Access-Control-Allow-Origin:
                              schema:
                                type: "string"
                            Access-Control-Allow-Methods:
                              schema:
                                type: "string"
                            Access-Control-Allow-Headers:
                              schema:
                                type: "string"
                          content:
                            application/json:
                              schema:
                                $ref: '#/components/schemas/MODEL845314'
                      x-amazon-apigateway-integration:
                        type: "mock"
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                              method.response.header.Access-Control-Allow-Origin: "'*'"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        passthroughBehavior: "when_no_match"
                          
                components:
                  schemas:
                    Division:
                      type: object
                      required:
                        - id
                        - name
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        cpmId:
                          type: string
                        cpmClientName:
                          type: string
                        cpmConnectionId:
                          type: string
                    Task:
                      type: object
                      required:
                        - id
                        - divisionId
                        - year
                        - month
                        - done
                      properties:
                        id:
                          type: string
                        taskType:
                          type: string
                        divisionId:
                          type: string
                        year:
                          type: string
                        month:
                          type: string
                        done:
                          type: boolean
                    MODEL845314:
                      required:
                      - "cpmClientName"
                      - "cpmConnectionId"
                      - "cpmId"
                      type: "object"
                      properties:
                        cpmId:
                          type: "string"
                        cpmClientName:
                          type: "string"
                        cpmConnectionId:
                          type: "string"
                    ArrayOfDivision:
                      type: "array"
                      items:
                        $ref: "#/components/schemas/Division"

    RestS3:
        Type : AWS::ApiGateway::RestApi
        Properties :
            Name : Alamont S3
            Description: Alamont S3 deployed using CFT
            Parameters:
                endpointConfigurationTypes: REGIONAL        
            Body:
                openapi: 3.0.1
                info:
                  version: 1.0.0
                  title: Alamont S3
                paths:
                  /{folder}:
                    get:
                      parameters:
                      - name: "Content-Type"
                        in: "header"
                        schema:
                          type: "string"
                      - name: "folder"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      responses:
                        "200":
                          description: "200 response"
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/Empty"
                      x-amazon-apigateway-integration:
                        type: "aws"
                        credentials: "arn:aws:iam::948478278077:role/api-dd"
                        uri: "arn:aws:apigateway:us-east-2:s3:path/{bucket}"
                        httpMethod: "GET"
                        responses:
                          default:
                            statusCode: "200"
                        requestParameters:
                          integration.request.header.x-amz-acl: "'authenticated-read'"
                          integration.request.path.bucket: "method.request.path.folder"
                          integration.request.header.Content-Type: "method.request.header.Content-Type"
                        passthroughBehavior: "when_no_match"
                  /{folder}/{item}:
                    get:
                      parameters:
                      - name: "Content-Type"
                        in: "header"
                        schema:
                          type: "string"
                      - name: "item"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      - name: "folder"
                        in: "path"
                        required: true
                        schema:
                          type: "string"
                      responses:
                        "200":
                          description: "200 response"
                          headers:
                            Content-Type:
                              schema:
                                type: "string"
                          content: {}
                      x-amazon-apigateway-integration:
                        type: "aws"
                        credentials: "arn:aws:iam::948478278077:role/api-dd"
                        uri: "arn:aws:apigateway:us-east-2:s3:path/{bucket}/{object}"
                        httpMethod: "GET"
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Content-Type: "integration.response.header.Content-Type"
                        requestParameters:
                          integration.request.path.object: "method.request.path.item"
                          integration.request.path.bucket: "method.request.path.folder"
                        passthroughBehavior: "when_no_match"
                  /:
                    get:
                      responses:
                        "400":
                          description: "400 response"
                          content: {}
                        "500":
                          description: "500 response"
                          content: {}
                        "200":
                          description: "200 response"
                          headers:
                            Content-Length:
                              schema:
                                type: "string"
                            Timestamp:
                              schema:
                                type: "string"
                            Content-Type:
                              schema:
                                type: "string"
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/Empty"
                      x-amazon-apigateway-integration:
                        type: "aws"
                        credentials: "arn:aws:iam::948478278077:role/api-dd"
                        uri: "arn:aws:apigateway:us-east-2:s3:path//"
                        httpMethod: "GET"
                        responses:
                          "4\\d{2}":
                            statusCode: "400"
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Content-Type: "integration.response.header.Content-Type"
                              method.response.header.Content-Length: "integration.response.header.Content-Length"
                              method.response.header.Timestamp: "integration.response.header.Date"
                          "5\\d{2}":
                            statusCode: "500"
                        passthroughBehavior: "when_no_match"
                components:
                  schemas:
                    Empty:
                      title: "Empty Schema"
                      type: "object"           
    DynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref TableName
        AttributeDefinitions:
          - 
            AttributeName: !Ref HashKeyElementName
            AttributeType: !Ref HashKeyElementType
        KeySchema:
          - 
            AttributeName: !Ref HashKeyElementName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    DeploymentRestApi:
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref RestApi
        Description: deployment of a Alamont Application Rest API
        StageName: beta
    DeploymentRestS3:
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref RestS3
        Description: deployment of a Alamont Application Rest S3
        StageName: beta
Outputs:
  RestApiEndpoint:
    Description: "RestApi stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/beta/"
  RestS3Endpoint:
    Description: "RestS3 stage endpoint"
    Value: !Sub "https://${RestS3}.execute-api.${AWS::Region}.amazonaws.com/beta/"
